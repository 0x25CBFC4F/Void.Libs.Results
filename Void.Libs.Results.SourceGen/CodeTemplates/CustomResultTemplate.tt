<#@ template #>
<#@ import namespace="Configuration" #>

#nullable enable

namespace <#= Settings.Namespace #>;

// Required usings
using System.CodeDom.Compiler;
using Void.Libs.Results;

/// <auto-generated>
/// Source file was generated by Void.Libs.Results.SourceGen at <#= DateTime.Now.ToString("f") #><br/>
/// Do not edit. Changes will be lost.
/// </auto-generated>
[GeneratedCode("Void.Libs.Results.SourceGen", null)]
public class <#= Settings.ClassName #>
{
    public bool Successful { get; set; }
    public List<CustomReportedMessage<<#= Settings.WarningEnum #>>> Warnings { get; set; } = new();
    public List<CustomReportedMessage<<#= Settings.ErrorEnum #>>> Errors { get; set; } = new();

    public static <#= Settings.ClassName #> New => new();
    
    public <#= Settings.ClassName #> WithWarning(<#= Settings.WarningEnum #> code, string? message = null, string? causedBy = null)
    {
        Warnings.Add(new CustomReportedMessage<<#= Settings.WarningEnum #>>(code, message, causedBy));
        return this;
    }
    
    public <#= Settings.ClassName #> WithWarning(CustomReportedMessage<<#= Settings.WarningEnum #>> warning)
    {
        Warnings.Add(warning);
        return this;
    }
    
    public <#= Settings.ClassName #> WithError(<#= Settings.ErrorEnum #> code, string? message = null, string? causedBy = null)
    {
        Errors.Add(new CustomReportedMessage<<#= Settings.ErrorEnum #>>(code, message, causedBy));
        return this;
    }

    public <#= Settings.ClassName #> WithError(CustomReportedMessage<<#= Settings.ErrorEnum #>> error)
    {
        Errors.Add(error);
        return this;
    }

    public <#= Settings.ClassName #> WithException(<#= Settings.ErrorEnum #> code, Exception ex, string? message)
    {
        Errors.Add(new CustomReportedMessage<<#= Settings.ErrorEnum #>>(code, message ?? ex.Message, null, ex));
        return this;
    }
}

<#
    if (Settings.IncludeDataVariant)
    {
#>
/// <auto-generated>
/// Source file was generated by Void.Libs.Results.SourceGen at <#= DateTime.Now.ToString("f") #><br/>
/// Do not edit. Changes will be lost.
/// </auto-generated>
[GeneratedCode("Void.Libs.Results.SourceGen", null)]
public class <#= Settings.ClassName #><TData> {
    public bool Successful { get; set; }
    public List<CustomReportedMessage<<#= Settings.WarningEnum #>>> Warnings { get; set; } = new();
    public List<CustomReportedMessage<<#= Settings.ErrorEnum #>>> Errors { get; set; } = new();

    public TData? Data { get; set; }

    public static <#= Settings.ClassName #><TData> New => new();
    
    public <#= Settings.ClassName #><TData> WithData(TData? data) {
        Data = data;
        return this;
    }

    public <#= Settings.ClassName #><TData> WithWarning(<#= Settings.WarningEnum #> code, string? message = null, string? causedBy = null)
    {
        Warnings.Add(new CustomReportedMessage<<#= Settings.WarningEnum #>>(code, message, causedBy));
        return this;
    }
    
    public <#= Settings.ClassName #><TData> WithWarning(CustomReportedMessage<<#= Settings.WarningEnum #>> warning)
    {
        Warnings.Add(warning);
        return this;
    }
    
    public <#= Settings.ClassName #><TData> WithError(<#= Settings.ErrorEnum #> code, string? message = null, string? causedBy = null)
    {
        Errors.Add(new CustomReportedMessage<<#= Settings.ErrorEnum #>>(code, message, causedBy));
        return this;
    }

    public <#= Settings.ClassName #><TData> WithError(CustomReportedMessage<<#= Settings.ErrorEnum #>> error)
    {
        Errors.Add(error);
        return this;
    }

    public <#= Settings.ClassName #><TData> WithException(<#= Settings.ErrorEnum #> code, Exception ex, string? message)
    {
        Errors.Add(new CustomReportedMessage<<#= Settings.ErrorEnum #>>(code, message ?? ex.Message, null, ex));
        return this;
    }
}
<#
    }
#>

<#+
    public CustomResultConfiguration Settings { get; set; }
#>
